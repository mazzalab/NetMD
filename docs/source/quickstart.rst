.. |contactslogo| image:: _static/img/contacts_icon.png
   :alt: protein contacts
   :width: 100
   :align: middle


.. |GetContacts| raw:: html

    <a href="https://getcontacts.github.io" target="_blank">GetContacts</a>

.. |GetContacts_github| raw:: html
    
    <a href="https://github.com/getcontacts/getcontacts" target="_blank">GitHub page</a>

.. |light_check| image:: _static/img/black_check.png
    :align: middle
    :class: only-light
    :width: 35


.. |dark_check| image:: _static/img/white_check.png 
    :align: middle
    :class: only-dark
    :width: 35

Quickstart
===========

.. raw:: html

   <hr class="text-linebreak">


=============================
Get Started with NetMD
=============================

To use NetMD with your raw MD data, begin with these steps. A more detailed, example-based quickstart is available on the :ref:`quickstart_example` page.

|

1.  **Get MD Contacts**:
-------------------------

First you need to extract residue-residue contacts from MD trajectories with the Python package |GetContacts|.


.. code-block:: console

   (env) $ python3 get_dynamic_contacts.py --topology topology_0.pdb \     
                                   --trajectory trajectory_0.dcd \
                                   --itypes all \
                                   --output full_contacts_0.tsv

This will produce a *tsv* file containing the residue-residue contacts for your trajectory. 

For more information refer to the GetContacts |GetContacts_github|.


.. note::

   Assign a common prefix to all contact files (e.g. Replica1, Replica2, ...), as it will be used in the output generated by NetMD.

|

2.  **Launch NetMD**:
-----------------------



Prepare to launch NetMD. To give the input files you can either list the files in the command line or specify a directory tree and a prefix for recursive exploration:

.. tab:: Sequence of Files

  .. code-block:: console

    (env) $ netmd -F [FullReplica1_WT.tsv FullReplica4_WT.tsv ...] -o ./results --verbose
  
  NetMD will iterate over the list of files and generate the embeddings for each one.

.. tab:: Directory Tree

  .. code-block:: console

    (env) $ netmd -I example_dir FullReplica --verbose

  NetMD will recursivly explore the directory tree starting from `example_dir` and generate the embeddings for each file with the prefix `FullReplica`.

  .. note::

    The `-I` option will only work if the input files are in the same directory tree. If you have files in different directories, you can list them with the `-F` option.


|

.. raw:: html

    <span style="display: inline-flex; align-items: center; gap: 5px;">
      <strong>That's it, you are ready to launch NetMD!</strong>
      <img src="_static/img/white_check.png" alt="check" class="only-dark" style="width: 35px; height: auto;">
      <img src="_static/img/black_check.png" alt="check" class="only-light" style="width: 35px; height: auto;">
    </span>


However, the program will use default values for many of its options. If you have the time, please take a look at NetMD's help section to learn more about the available options.

|

3. **Get a Coffee**:
--------------------


.. raw:: html

    <span style="display: inline-flex; align-items: center; gap: 5px;">
      <p>Depending on the number of frames in your trajectory, the embedding process may take a few minutes. So, while you wait, why not grab a cup of coffee?</p>
      <img src="_static/img/coffe_icon.png" alt="check" style="width: 35px; height: auto;">
    </span>

|

4. **Analyze Results**:
------------------------

The final output will include:

* Embeddings for each MD replica frame.
* The filtered graph representation used to generate the embeddings.
* The dynamic time warping (DTW) mapping between the frames and the barycenter.
* The iterative pruning based on the replicas' distance from the barycenter.
* Several plots to help visualize and understand results and guide further analysis.

To learn more about the output files and how to interpret them, refer to the :ref:`quickstart_example` section.